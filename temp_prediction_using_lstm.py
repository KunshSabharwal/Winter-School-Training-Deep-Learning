# -*- coding: utf-8 -*-
"""Temp_prediction_using_LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/196IZ5bqS8E40vrk0NPS8PkTQ7fRuIOkZ
"""

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.preprocessing import MinMaxScaler

# Step 1: Create a Simple Toy Dataset (daily temperatures)
temperature_data = np.array([30, 32, 35, 31, 29, 30, 28, 27, 26, 25, 24, 23, 22, 23, 25, 28, 30, 32, 34, 36, 37])

# Step 2: Normalize the Data (MinMax Scaling)
scaler = MinMaxScaler(feature_range=(0, 1))
temperature_data_scaled = scaler.fit_transform(temperature_data.reshape(-1, 1))

# Step 3: Prepare the Data for Training
# We use the past 3 days' temperature to predict the next day's temperature.
sequence_length = 3
X = []
y = []

for i in range(sequence_length, len(temperature_data_scaled)):
    X.append(temperature_data_scaled[i-sequence_length:i, 0])  # Previous 3 days' temperatures
    y.append(temperature_data_scaled[i, 0])  # Next day's temperature

X = np.array(X)
y = np.array(y)

# Reshape X for LSTM: (samples, timesteps, features)
X = X.reshape(X.shape[0], X.shape[1], 1)

# Step 4: Build the LSTM Model
model = Sequential([
    LSTM(50, return_sequences=False, input_shape=(X.shape[1], 1)),  # LSTM layer with 50 units
    Dense(1)  # Output layer
])

# Compile the model
model.compile(loss='mean_squared_error', optimizer='adam')

# Step 5: Train the Model
model.fit(X, y, epochs=200, batch_size=16, verbose=2)

# Step 6: Predict the Next Temperature
last_sequence = temperature_data_scaled[-sequence_length:].reshape(1, sequence_length, 1)
predicted_temperature_scaled = model.predict(last_sequence)

# Step 7: Reverse the Scaling
predicted_temperature = scaler.inverse_transform(predicted_temperature_scaled)
print(f"Predicted next day's temperature: {predicted_temperature[0][0]} °C")

# Step 8: Plotting the Results
plt.plot(temperature_data, label='Actual Temperature')
plt.plot(np.arange(len(temperature_data), len(temperature_data)+1), predicted_temperature, label='Predicted Temperature', marker='o', color='red')
plt.legend()
plt.xlabel('Day')
plt.ylabel('Temperature (°C)')
plt.title('Temperature Prediction using LSTM')
plt.show()